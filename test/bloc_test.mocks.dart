// Mocks generated by Mockito 5.3.2 from annotations
// in weight_converter_app/test/bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:rxdart/rxdart.dart' as _i3;
import 'package:weight_converter_app/controllers/mass_conversion_stream.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStreamSink_0<S> extends _i1.SmartFake implements _i2.StreamSink<S> {
  _FakeStreamSink_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeValueStream_1<T> extends _i1.SmartFake
    implements _i3.ValueStream<T> {
  _FakeValueStream_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MassConversionStream].
///
/// See the documentation for Mockito's code generation for more information.
class MockMassConversionStream extends _i1.Mock
    implements _i4.MassConversionStream {
  @override
  _i2.StreamSink<_i4.MassEvent> get event => (super.noSuchMethod(
        Invocation.getter(#event),
        returnValue: _FakeStreamSink_0<_i4.MassEvent>(
          this,
          Invocation.getter(#event),
        ),
        returnValueForMissingStub: _FakeStreamSink_0<_i4.MassEvent>(
          this,
          Invocation.getter(#event),
        ),
      ) as _i2.StreamSink<_i4.MassEvent>);
  @override
  _i3.ValueStream<_i4.MassEvent> get eventStream => (super.noSuchMethod(
        Invocation.getter(#eventStream),
        returnValue: _FakeValueStream_1<_i4.MassEvent>(
          this,
          Invocation.getter(#eventStream),
        ),
        returnValueForMissingStub: _FakeValueStream_1<_i4.MassEvent>(
          this,
          Invocation.getter(#eventStream),
        ),
      ) as _i3.ValueStream<_i4.MassEvent>);
  @override
  _i3.ValueStream<_i4.MassState> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeValueStream_1<_i4.MassState>(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeValueStream_1<_i4.MassState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.ValueStream<_i4.MassState>);
  @override
  _i2.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
}
